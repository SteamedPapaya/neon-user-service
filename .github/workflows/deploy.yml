name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      # 4. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 5. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t tonari:latest .

      # 6. Docker 이미지 저장 (tar 파일로)
      - name: Save Docker image to tar
        run: docker save tonari:latest -o tonari.tar

      # 7. SSH 키 설정
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 8. Docker 이미지 tar 파일을 EC2로 전송
      - name: Copy Docker image to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa tonari.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/

      # 9. EC2에서 Docker 이미지 로드 및 컨테이너 실행
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Docker 이미지 로드
            docker load -i /home/${{ secrets.EC2_USER }}/tonari.tar

            # 기존 애플리케이션 컨테이너 중지 및 제거
            docker stop tonari-app || true
            docker rm tonari-app || true

            # 새로운 애플리케이션 컨테이너 실행
            docker load -i /home/${{ secrets.EC2_USER }}/tonari.tar
            docker run -d \
              --name tonari-app \
              --network tonari-network \
              -p 8080:8080 \
              tonari:latest
          EOF